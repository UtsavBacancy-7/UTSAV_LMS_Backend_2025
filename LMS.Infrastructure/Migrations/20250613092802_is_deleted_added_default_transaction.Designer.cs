// <auto-generated />
using System;
using LMS_Backend.LMS.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS_Backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250613092802_is_deleted_added_default_transaction")]
    partial class is_deleted_added_default_transaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.BookReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.BorrowRequest", b =>
                {
                    b.Property<int>("BorrowRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRequestId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ApprovedDate")
                        .HasColumnType("date");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BorrowRequestId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowRequests");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3061),
                            Description = "Futuristic and scientific concepts",
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3063),
                            Description = "Crime and secret unraveling",
                            GenreName = "Mystery"
                        },
                        new
                        {
                            GenreId = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3065),
                            Description = "Life stories of individuals",
                            GenreName = "Biography"
                        },
                        new
                        {
                            GenreId = 4,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3067),
                            Description = "Personal development books",
                            GenreName = "Self Help"
                        },
                        new
                        {
                            GenreId = 5,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3068),
                            Description = "Magical and supernatural worlds",
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            GenreId = 6,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3070),
                            Description = "Love stories and relationships",
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreId = 7,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3071),
                            Description = "Scary and thrilling stories",
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 8,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3260),
                            Description = "Historical events and narratives",
                            GenreName = "History"
                        },
                        new
                        {
                            GenreId = 9,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3261),
                            Description = "Fast-paced and suspenseful stories",
                            GenreName = "Thriller"
                        },
                        new
                        {
                            GenreId = 10,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3263),
                            Description = "Books for kids and young readers",
                            GenreName = "Children's"
                        },
                        new
                        {
                            GenreId = 11,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3264),
                            Description = "Covers books that do not fit into any predefined genre categories.",
                            GenreName = "Others"
                        });
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.ReturnRequest", b =>
                {
                    b.Property<int>("ReturnRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnRequestId"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("BorrowRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("PenaltyFinlized")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ReturnRequestId");

                    b.HasIndex("BorrowRequestId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(2778),
                            CreatedBy = 0,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(2781),
                            CreatedBy = 0,
                            RoleName = "Librarian"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(2783),
                            CreatedBy = 0,
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<int?>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ConfigId"));

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ConfigId");

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            ConfigId = 1,
                            ConfigKey = "MaxBorrowPeriod",
                            ConfigValue = "14",
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3325),
                            Description = "Maximum number of days a book can be borrowed"
                        },
                        new
                        {
                            ConfigId = 2,
                            ConfigKey = "MaxBorrowLimit",
                            ConfigValue = "3",
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3327),
                            Description = "Maximum number of books a student can have borrowed at the same time"
                        },
                        new
                        {
                            ConfigId = 3,
                            ConfigKey = "PenaltyPerDay",
                            ConfigValue = "20",
                            CreatedAt = new DateTime(2025, 6, 13, 9, 28, 1, 747, DateTimeKind.Utc).AddTicks(3329),
                            Description = "Penalty per day for late return"
                        });
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishListId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WishListId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", null)
                        .WithMany("Logs")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Book", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.BookReview", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.BorrowRequest", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.Book", "Book")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", "User")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.ReturnRequest", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.BorrowRequest", "BorrowRequest")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("LMS_Backend.LMS.Domain.Entities.ReturnRequest", "BorrowRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowRequest");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.User", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.WishList", b =>
                {
                    b.HasOne("LMS_Backend.LMS.Domain.Entities.Book", "Book")
                        .WithMany("WishLists")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Backend.LMS.Domain.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookReviews");

                    b.Navigation("BorrowRequests");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.BorrowRequest", b =>
                {
                    b.Navigation("ReturnRequest");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS_Backend.LMS.Domain.Entities.User", b =>
                {
                    b.Navigation("BorrowRequests");

                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
